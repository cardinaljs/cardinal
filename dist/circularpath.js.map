{"version":3,"file":"circularpath.js","sources":["../src/circular-path/circle.js","../src/circular-path/index.js"],"sourcesContent":["export const POINT_ANGLE = 360\nexport const HALF = 1 / 2\nexport const PI = Math.PI\nexport const RAD = PI / (POINT_ANGLE * HALF)\n\nexport class Circle {\n  constructor(radius) {\n    /**\n     * @type {number}\n     */\n    this.radius = radius\n    this.diameter = this.radius * 2\n  }\n\n  get area() {\n    return PI * this.radius ** 2\n  }\n\n  get circumference() {\n    return 2 * PI * this.radius\n  }\n\n  areaOfSect(angle) {\n    angle *= RAD\n    return angle / POINT_ANGLE * this.area\n  }\n\n  lenOfSect(angle) {\n    angle *= RAD\n    return angle / POINT_ANGLE * this.circumference\n  }\n}\n","import {\n  Circle,\n  HALF,\n  POINT_ANGLE,\n  RAD\n} from './circle'\n\nconst ZERO = 0\nconst DEG = 1 / RAD\nconst RIGHT_ANGLE = POINT_ANGLE >> 2\n/**\n * Enum of all quadrants from first to fourth.\n * The quadrant is not a usual one; it starts from the 12th\n * hand of the clock and moves anti-clockwise\n * @enum {number}\n * @const\n */\nconst Quadrant = {\n  FIRST: 90,\n  SECOND: 180,\n  THIRD: 270,\n  FOURTH: 360\n}\n\n// There are two Triangles formed 1) Right angle 2) issoceles\nexport default class CircularPath extends Circle {\n  constructor(radius, angles) {\n    super(radius)\n    this._angles = angles\n    this.angles = angles.map((value) => RAD * value)\n    this._quad = null\n  }\n\n  get paths() {\n    const paths = []\n    this._angles.forEach((angle) => {\n      if (angle === ZERO || angle <= POINT_ANGLE && angle % RIGHT_ANGLE === ZERO) {\n        paths.push(this.radius)\n        return\n      }\n      this._quad = this._getQuadrant(angle)\n      angle = this._quad !== Quadrant.FIRST ? this._quad - angle : angle\n      const radAngle = this._degToRad(angle)\n      const hyp = this._chordLength(radAngle)\n      // RAT: Right Angle Triangle\n      // These are the angles of a RAT that overlaps the circle\n      // with its hypotenuse being the chord that closes the\n      // inner \"cut\" triangle\n      // angleAofRAT = 90 or what else do you think.\n      const angleCofRAT = this._getLastTwoEqAngles(radAngle)\n      const angleBofRAT = RIGHT_ANGLE - angleCofRAT\n      // what would be the path is the `opp` side with respect\n      // to `angleBofRAT` i.e the line that faces it.\n      paths.push(this._findOppUseSOH(this._degToRad(angleBofRAT), hyp))\n    })\n    return paths\n  }\n\n  // private\n  _degToRad(deg) {\n    return RAD * deg\n  }\n\n  _radToDeg(rad) {\n    return DEG * rad\n  }\n\n  _findOppUseSOH(angle, hyp) {\n    return Math.sin(angle) * hyp\n  }\n\n  /**\n   * Finds the value of the last two equal angles in the\n   * triangle cut out of the circle.\n   * There are three angles, one is given as `angleA`;\n   * the other two are equal since two sides `b` & `c` are\n   * equal i.e `b = c = radius`\n   *\n   * @param {number} angleA an angle in degree of the only unequal\n   * part of the triangle\n   * @returns {number} an angle in degree that reps the angle of the\n   * two equal sides of the triangle\n   */\n  _getLastTwoEqAngles(angleA) {\n    return (POINT_ANGLE * HALF - this._radToDeg(angleA)) * HALF\n  }\n\n  _getQuadrant(angle) {\n    let quad\n    [\n      Quadrant.FOURTH,\n      Quadrant.THIRD,\n      Quadrant.SECOND,\n      Quadrant.FIRST\n    ].forEach((value, index, array) => {\n      if (angle > value) {\n        quad = array[--index]\n      } else {\n        quad = array[index]\n      }\n    })\n    return quad\n  }\n\n  _chordLength(angle) {\n    const radiusSq = this.radius ** 2\n    /**\n     * cosine rule [`a**2 = b**2 + c**2 - 2bc cos A`]\n     *\n     * `2 * radiusSq` stands as `b**2 + c**2`.\n     * Therefore `b**2 + c**2 = 2bc` since `b = c = radius`.\n     * Where `b` & `c` are two sides of a triangle cut\n     * from the circle, enclosed with a chord, with the `theta`\n     * joining them equal `angle`\n     *\n     * `angle` is the angle `theta` between the two radii\n     * drawn from the centre of the circle\n     */\n    // a = a**2\n    let a = 2 * radiusSq - 2 * radiusSq * Math.cos(angle)\n    a = Math.sqrt(a)\n    return a\n  }\n}\n"],"names":["POINT_ANGLE","HALF","PI","Math","RAD","Circle","radius","diameter","areaOfSect","angle","area","lenOfSect","circumference","ZERO","DEG","RIGHT_ANGLE","Quadrant","FIRST","SECOND","THIRD","FOURTH","CircularPath","angles","_angles","map","value","_quad","_degToRad","deg","_radToDeg","rad","_findOppUseSOH","hyp","sin","_getLastTwoEqAngles","angleA","_getQuadrant","quad","forEach","index","array","_chordLength","radiusSq","a","cos","sqrt","paths","push","radAngle","angleCofRAT","angleBofRAT"],"mappings":"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"}