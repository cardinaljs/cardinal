{"version":3,"file":"drawer.js","sources":["../../src/drawer/service.js","../../src/drawer/rectangle.js","../../src/drawer/vector.js","../../src/drawer/snapped-drawer/bottom.js","../../src/drawer/snapped-drawer/left.js","../../src/drawer/snapped-drawer/right.js","../../src/drawer/snapped-drawer/top.js","../../src/drawer/snapped-drawer/index.js","../../src/drawer/index.js"],"sourcesContent":["export class Service {\n  constructor(event) {\n    this._event = event\n  }\n\n  lock() {\n    this._event.stopImmediatePropagation()\n  }\n\n  inhibitSubTask() {\n    this._event.preventDefault()\n  }\n}\n","export class Rectangle {\n  constructor(...paths) {\n    if (paths.length === 4) {\n      const [x1, y1, x2, y2] = paths\n      this.coordsX = {\n        x1,\n        x2\n      }\n      this.coordsY = {\n        y1,\n        y2\n      }\n    } else if (paths.length === 2) {\n      const {\n        x1, y1\n      } = paths[0]\n      const {\n        x2, y2\n      } = paths[1]\n      this.coordsX = {\n        x1,\n        x2\n      }\n      this.coordsY = {\n        y1,\n        y2\n      }\n    }\n  }\n\n  // getter\n  get width() {\n    return Math.abs(this.coordsX.x2 - this.coordsX.x1)\n  }\n\n  get height() {\n    return Math.abs(this.coordsY.y2 - this.coordsY.y1)\n  }\n\n  get perimeter() {\n    return 2 * (this.width + this.height)\n  }\n\n  get area() {\n    return this.width * this.height\n  }\n\n  get greaterWidth() {\n    return this.width > this.height\n  }\n\n  get greaterHeight() {\n    return !this.greaterWidth\n  }\n}\n","import {\n  Rectangle\n} from './rectangle'\n\nexport class VectorRectangle extends Rectangle {\n  // eslint-disable-next-line no-useless-constructor\n  constructor(...paths) {\n    super(...paths)\n  }\n\n  get displacementX() {\n    return this.coordsX.x2 - this.coordsX.x1\n  }\n\n  get displacementY() {\n    return this.coordsY.y2 - this.coordsY.y1\n  }\n\n  get resultant() {\n    if (!this.displacementY) {\n      return this.displacementX\n    } else if (!this.displacementX) {\n      return this.displacementY\n    }\n    return Math.sqrt(\n      this.displacementY ** 2 + this.displacementX ** 2\n    )\n  }\n}\n","import {\n  Bound,\n  DrawerResponseInterface as DRI,\n  Path,\n  WINDOW,\n  ZERO,\n  offsetBottom,\n  resolveThreshold\n} from './../../util'\nimport {\n  Service\n} from './../service'\nimport {\n  VectorRectangle\n} from './../vector'\n\nconst THRESHOLD = 'threshold'\nconst BELOW_THRESHOLD = 'belowthreshold'\nconst OPEN = 'open'\nconst CLOSE = 'close'\nconst UNIT = 'px'\nconst MAX_START_AREA = 25\nconst THRESHOLD_VALUE = 0.667\nconst FALSE_TOUCH_START_POINT = 2\n\nexport default class Bottom {\n  /**\n   * @param {{}} options\n   * an object containing all required properties\n   * @param {Bound} bound a boundary object\n   */\n  constructor(options, bound) {\n    this.options = options\n    this.bound = bound\n    /**\n     * Drawer Element\n     * @type {HTMLElement}\n     */\n    this.element = options.ELEMENT\n    /**\n     * Size of device window\n     * @type {Function}\n     */\n    this._winSize = this.options.sizeOfWindow || Bottom._windowSize\n    /**\n     * @type {number}\n     */\n    this.winSize = this._winSize()\n    /**\n     * @type {number}\n     */\n    this.height = this.options.SIZE\n    this.unit = this.options.unit || UNIT\n    /**\n     * @type {number}\n     * A minimum area where the draw-start is sensitive\n     */\n    this.minArea = this.winSize - (this.bound.lower || this.options.maxStartArea || MAX_START_AREA)\n\n    /**\n     * A threshold which the `touchmove` signal must attain\n     * before being qualified to stay shown\n     * the threshold should be a value between `0` and `1.0`\n     * @type {number}\n     */\n    this.threshold = this.options.threshold || THRESHOLD_VALUE\n    this.threshold = resolveThreshold(this.threshold)\n\n    // Touch coordinates (Touch Start)\n    this.startX = -1\n    this.startY = -1\n    // Touch coordinates (Touch Move)\n    this.resumeX = -1\n    this.resumeY = -1\n    // Touch coordinates (Touch End) [these may not be important]\n    this.endX = -1\n    this.endY = -1\n\n    /**\n     * A control for scroll. This control prevents\n     * a clash between coordinates dancing between\n     * the (&delta;`X`) coords and (&delta;`Y`) coords.\n     * Utilising the `Rectangle` class to get bounds\n     * and isolate territories\n     * @type {boolean}\n     */\n    this.scrollControlSet = false\n    this.scrollControl = null\n    this.timing = {\n      /**\n       * @type {Date}\n       */\n      start: null,\n      /**\n       * @type {Date}\n       */\n      end: null\n    }\n\n    this._context = this\n  }\n\n  /**\n   * The `touchstart` event handler for the `Bottom` drawer `class`\n   * @param {TouchEvent} touchEvent an event `object`: An event `object`\n   * representing an `object` of all `properties` related\n   * to the `touchstart` event.\n   * @param {Function} fn - a callback function called when the `start`\n   * event is triggered\n   * @returns {void}\n   */\n  start(touchEvent, fn) {\n    this.timing.start = new Date()\n    this._updateOrientation()\n    const WIN_HEIGHT = this.winSize\n    const start = touchEvent.changedTouches[0].clientY\n    this.startX = touchEvent.changedTouches[0].clientX\n    this.startY = start\n    /**\n     * The `Drawer`'s `Bottom` class uses the `CSS property`, `bottom`\n     * for updating and defining position of the drawn element\n     */\n    const currentPosition = offsetBottom(this.element)\n    const bound = this.bound\n    this.positionOnStart = currentPosition\n    const dimension = bound.lower ? `-${bound.upper - bound.lower}${this.unit}` : `-${bound.upper - (WIN_HEIGHT - start)}${this.unit}`\n    const displacement = `-${bound.upper - FALSE_TOUCH_START_POINT}${this.unit}`\n\n    if (start <= WIN_HEIGHT && start >= this.minArea && currentPosition === bound.slack) {\n      const response = {\n        [DRI.position]: currentPosition,\n        [DRI.dimension]: dimension,\n        [DRI.displacement]: displacement\n      }\n      fn.call(this._context, new Service(touchEvent), response, new Path(this.startX, this.startY))\n    }\n  }\n\n  /**\n   * The `touchmove` event handler for the `Bottom` drawer `class`\n   * @param {TouchEvent} touchEvent an event `object`: An event `object`\n   * representing an `object` of all `properties` related\n   * to the `touchmove` event.\n   * @param {Function} fn - a callback function called when the `move`\n   * event is triggered\n   * @returns {void}\n   */\n  move(touchEvent, fn) {\n    /* eslint complexity: [\"error\", 25] */\n    const WIN_HEIGHT = this.winSize\n    const FALSE_HEIGHT = WIN_HEIGHT - this.bound.upper // should be `-this.positionOnStart`\n    const resume = touchEvent.changedTouches[0].clientY\n    this.resumeX = touchEvent.changedTouches[0].clientX\n    this.resumeY = resume\n\n    const currentPosition = offsetBottom(this.element)\n    const bound = this.bound\n    // const nextAction = this.positionOnStart === ZERO ? CLOSE : OPEN\n\n    const start = this.startY\n    // const height = bound.upper || this.height\n    /**\n     * When the touch doesn't start from the max-height\n     * of the element ignore `start` and use `height`\n     * as starting point.\n     */\n    const virtualStart = start < FALSE_HEIGHT ? FALSE_HEIGHT : start\n\n    const dimension = `${start - resume + this.positionOnStart}${this.unit}`\n    // const dimension = `-${height - bound.lower - (WIN_HEIGHT - resume)}${this.unit}`\n\n    /**\n     * Dimension for closing. When the drawer is being closed,\n     * the `height` is the max dimension and the `start` could\n     * possibly be more than the `height`\n     * or less than the `height`.\n     * To assure an accurate dimension the `virtualStart`\n     * determines whether to use the `height` as starting point\n     * or the actual `start`. If the actual start is more than\n     * `height`, the height becomes the start point else the `start`\n     */\n    const vdimension = `-${-virtualStart + resume - this.positionOnStart}${this.unit}`\n    const rect = new VectorRectangle(\n      this.startX,\n      this.startY,\n      this.resumeX,\n      this.resumeY\n    )\n    const isBoundY = rect.greaterHeight\n\n    if (!this.scrollControlSet) {\n      this.scrollControl = isBoundY\n      this.scrollControlSet = !this.scrollControlSet\n    }\n\n    // OPEN LOGIC\n    if (start <= WIN_HEIGHT && (start >= this.minArea || start >= FALSE_HEIGHT - currentPosition) &&\n    currentPosition < ZERO && rect.width < bound.gap && isBoundY &&\n    this.scrollControl && rect.displacementY < ZERO) {\n      const response = {\n        [DRI.position]: currentPosition,\n        [DRI.posOnStart]: this.positionOnStart,\n        [DRI.dimension]: dimension,\n        [DRI.open]: true,\n        [DRI.close]: false\n      }\n      fn.call(this._context, new Service(touchEvent), response, rect)\n    }\n\n    // CLOSE LOGIC\n    if (resume >= FALSE_HEIGHT && Math.abs(currentPosition) < bound.gap && rect.width < bound.gap &&\n    isBoundY && this.scrollControl && rect.displacementY > ZERO) {\n      const response = {\n        [DRI.position]: currentPosition,\n        [DRI.posOnStart]: this.positionOnStart,\n        [DRI.dimension]: vdimension,\n        [DRI.close]: true,\n        [DRI.open]: false\n      }\n      fn.call(this._context, new Service(touchEvent), response, rect)\n    }\n  }\n\n  /**\n   * The `touchend` event handler for the `Bottom` drawer `class`\n   * @param {TouchEvent} touchEvent an event `object`: An event `object`\n   * representing an `object` of all `properties` related\n   * to the `touchend` event.\n   * @param {Function} fn - a callback function called when the `end`\n   * event is triggered\n   * @param {{}} thresholdState - a state object which should be passed\n   * by reference for updating by this method\n   * @returns {void}\n   */\n  end(touchEvent, fn, thresholdState) {\n    this.timing.end = new Date()\n    const WIN_HEIGHT = this.winSize\n    const FALSE_HEIGHT = WIN_HEIGHT - this.bound.upper\n    const end = touchEvent.changedTouches[0].clientY\n    this.endX = touchEvent.changedTouches[0].clientX\n    this.endY = end\n\n    const rect = new VectorRectangle(this.startX, this.startY, this.endX, this.endY)\n\n    const start = this.startY\n    const TIMING = this.timing.end.getTime() - this.timing.start.getTime()\n    const threshold = this.threshold\n    const signedOffsetSide =  offsetBottom(this.element)\n    const bound = this.bound\n    const customBound = new Bound(bound.upper + this.positionOnStart, bound.upper)\n    const nonZero = `${bound.slack}${this.unit}`\n    const zero = `${ZERO}`\n    const height = bound.upper || this.height\n    const offsetSide = Math.abs(signedOffsetSide)\n    let action = OPEN\n    // release the control for another session\n    this.scrollControl = this.scrollControlSet = false // eslint-disable-line no-multi-assign\n\n    const response = {\n      [DRI.position]: signedOffsetSide,\n      [DRI.posOnStart]: this.positionOnStart,\n      rect\n    }\n\n    function getResponse(state, trueForOpen) {\n      if (state === THRESHOLD && trueForOpen || state === BELOW_THRESHOLD && !trueForOpen) {\n        return {\n          [DRI.dimension]: zero,\n          TIMING,\n          [DRI.oppositeDimension]: nonZero,\n          ...response\n        }\n      } else if (state === THRESHOLD && !trueForOpen || state === BELOW_THRESHOLD && trueForOpen) {\n        return {\n          [DRI.dimension]: nonZero,\n          TIMING,\n          [DRI.oppositeDimension]: zero,\n          ...response\n        }\n      }\n      return {}\n    }\n\n    // OPEN LOGIC\n    if (rect.displacementY <= ZERO && (start >= this.minArea || start >= FALSE_HEIGHT - signedOffsetSide)) {\n      /**\n       * Threshold resolution is done here to get the original\n       * set value of the threshold before the first resolution\n       * Here it's the original value of threshold needed, if\n       * it was a legal value.\n       * value = 0.75\n       * value = resolve(value) => 0.25\n       * resolve(value) => 0.75\n       */\n      if (rect.height >= customBound.gap * resolveThreshold(threshold)) {\n        thresholdState.state = [THRESHOLD, CLOSE]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], true)\n      } else {\n        thresholdState.state = [BELOW_THRESHOLD, CLOSE]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], true)\n      }\n      thresholdState.service = new Service(touchEvent)\n      fn.call(this, action)\n      return\n    }\n\n    // CLOSE LOGIC\n    if (rect.displacementY >= ZERO && this.resumeY >= FALSE_HEIGHT) {\n      action = CLOSE\n      if (offsetSide >= height * threshold) {\n        thresholdState.state = [THRESHOLD, OPEN]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], false)\n      } else {\n        thresholdState.state = [BELOW_THRESHOLD, OPEN]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], false)\n      }\n      thresholdState.service = new Service(touchEvent)\n      fn.call(this, action)\n    }\n  }\n\n  setContext(ctx) {\n    this._context = ctx\n    return this\n  }\n\n  static _getStyle(elt, pseudoElt) {\n    return pseudoElt ? WINDOW.getComputedStyle(elt, pseudoElt) : WINDOW.getComputedStyle(elt)\n  }\n\n  static _windowSize() {\n    return WINDOW.screen.height\n  }\n\n  // no need for `window.onorientationchange`\n  _updateOrientation() {\n    this.winSize = typeof this._winSize === 'function' ? this._winSize() : Bottom._windowSize()\n    this.minArea = this.winSize - (this.bound.lower || this.options.maxStartArea || MAX_START_AREA)\n  }\n}\n","import {\n  Bound,\n  DrawerResponseInterface as DRI,\n  Path,\n  WINDOW,\n  ZERO,\n  resolveThreshold\n} from './../../util'\nimport {\n  Service\n} from './../service'\nimport {\n  VectorRectangle\n} from './../vector'\n\nconst THRESHOLD = 'threshold'\nconst BELOW_THRESHOLD = 'belowthreshold'\nconst OPEN = 'open'\nconst CLOSE = 'close'\nconst UNIT = 'px'\nconst MAX_START_AREA = 25\nconst THRESHOLD_VALUE = 0.667\nconst FALSE_TOUCH_START_POINT = 2\n\nexport default class Left {\n  /**\n   * @param {{}} options\n   * an object containing all required properties\n   * @param {Bound} bound a boundary object\n   */\n  constructor(options, bound) {\n    this.options = options\n    this.bound = bound\n    /**\n     * Drawer Element\n     * @type {HTMLElement}\n     */\n    this.element = options.ELEMENT\n    /**\n     * Size of device window\n     *\n     * unused: required in `Right` and `Bottom`\n     * @type {Function}\n     */\n    this._winSize = this.options.sizeOfWindow || Left._windowSize\n    this.winSize = this._winSize()\n    /**\n     * @type {number}\n     */\n    this.width = this.options.SIZE\n    this.unit = this.options.unit || UNIT\n    /**\n     * @type {number}\n     * A maximum area where the draw-start is sensitive\n     * Use set boundary (`bound`) if there's an initial\n     * offset\n     */\n    this.maxArea = this.bound.lower || this.options.maxStartArea || MAX_START_AREA\n\n    /**\n     * A threshold which the `touchmove` signal must attain\n     * before being qualified to stay shown\n     * the threshold should be a value between `0` and `1.0`\n     * @type {number}\n     */\n    this.threshold = this.options.threshold || THRESHOLD_VALUE\n    this.threshold = resolveThreshold(this.threshold)\n\n    // Touch coordinates (Touch Start)\n    this.startX = -1\n    this.startY = -1\n    // Touch coordinates (Touch Move)\n    this.resumeX = -1\n    this.resumeY = -1\n    // Touch coordinates (Touch End) [these may not be important]\n    this.endX = -1\n    this.endY = -1\n\n    /**\n     * A control for scroll. This control prevents\n     * a clash between coordinates dancing between\n     * the (&delta;`X`) coords and (&delta;`Y`) coords.\n     * Utilising the `Rectangle` class to get bounds\n     * and isolate territories\n     * @type {boolean}\n     */\n    this.scrollControlSet = false\n    this.scrollControl = null\n    this.timing = {\n      /**\n       * @type {Date}\n       */\n      start: null,\n      /**\n       * @type {Date}\n       */\n      end: null\n    }\n\n    this._context = this\n  }\n\n  /**\n   * The `touchstart` event handler for the `Left` drawer `class`\n   * @param {TouchEvent} touchEvent an event `object`: An event `object`\n   * representing an `object` of all `properties` related\n   * to the `touchstart` event.\n   * @param {Function} fn - a callback function called when the `start`\n   * event is triggered\n   * @returns {void}\n   */\n  start(touchEvent, fn) {\n    this.timing.start = new Date()\n    this._updateOrientation()\n    const start = touchEvent.changedTouches[0].clientX\n    this.startX = start\n    this.startY = touchEvent.changedTouches[0].clientY\n    /**\n     * The `Drawer`'s `Left` class uses the `CSS property`, `left`\n     * for updating and defining position of the drawn element\n     */\n    const currentPosition = this.element.offsetLeft\n    const bound = this.bound\n    this.positionOnStart = currentPosition\n    const dimension = bound.lower ? `-${bound.upper - bound.lower}${this.unit}` : `-${bound.upper - start}${this.unit}`\n    const displacement = `-${bound.upper - FALSE_TOUCH_START_POINT}${this.unit}`\n\n    if (start >= ZERO && start <= this.maxArea && currentPosition === bound.slack) {\n      const response = {\n        [DRI.position]: currentPosition,\n        [DRI.dimension]: dimension,\n        [DRI.displacement]: displacement\n      }\n      fn.call(this._context, new Service(touchEvent), response, new Path(this.startX, this.startY))\n    }\n  }\n\n  /**\n   * The `touchmove` event handler for the `Left` drawer `class`\n   * @param {TouchEvent} touchEvent an event `object`: An event `object`\n   * representing an `object` of all `properties` related\n   * to the `touchmove` event.\n   * @param {Function} fn - a callback function called when the `move`\n   * event is triggered\n   * @returns {void}\n   */\n  move(touchEvent, fn) {\n    /* eslint complexity: [\"error\", 25] */\n    const resume = touchEvent.changedTouches[0].clientX\n    this.resumeX = resume\n    this.resumeY = touchEvent.changedTouches[0].clientY\n\n    const currentPosition = this.element.offsetLeft\n    const bound = this.bound\n    // const nextAction = this.positionOnStart === ZERO ? CLOSE : OPEN\n    const start = this.startX\n    const width = bound.upper || this.width\n    /**\n     * When the touch doesn't start from the max-width\n     * of the element ignore `start` and use `width`\n     * as starting point.\n     */\n    const virtualStart = start > width ? width : start\n    /**\n     * Dimension for opening. When the drawer is being opened,\n     * the `width` is the max dimension, and the `start` can\n     * only be less than the `width` (from a range of `0` to\n     * `this.maxArea` e.g `0` - `25`), so the current\n     * reading from `resume` is subtracted from the `width` to\n     * get the accurate position to update the drawer with.\n     */\n\n    const dimension = `${-start + resume + this.positionOnStart}${this.unit}`\n    // const dimension = `-${width - bound.lower - resume}${this.unit}`\n    /**\n     * Dimension for closing. When the drawer is being closed,\n     * the `width` is the max dimension and the `start` could\n     * possibly be more than the `width`\n     * or less than the `width`.\n     * To assure an accurate dimension the `virtualStart`\n     * determines whether to use the `width` as starting point\n     * or the actual `start`. If the actual start is more than\n     * `width`, the width becomes the start point else the `start`\n     */\n    const vdimension = `-${virtualStart - resume - this.positionOnStart}${this.unit}`\n    const rect = new VectorRectangle(\n      this.startX,\n      this.startY,\n      this.resumeX,\n      this.resumeY\n    )\n    const isBoundX = rect.greaterWidth\n\n    if (!this.scrollControlSet) {\n      this.scrollControl = isBoundX\n      this.scrollControlSet = !this.scrollControlSet\n    }\n\n    // OPEN LOGIC\n    if (start >= ZERO && (start <= this.maxArea || start <= width + currentPosition) &&\n    currentPosition < ZERO && rect.width < bound.gap && isBoundX &&\n    this.scrollControl && rect.displacementX > ZERO) {\n      const response = {\n        [DRI.position]: currentPosition,\n        [DRI.posOnStart]: this.positionOnStart,\n        [DRI.dimension]: dimension,\n        [DRI.open]: true,\n        [DRI.close]: false\n      }\n      fn.call(this._context, new Service(touchEvent), response, rect)\n    }\n\n    // CLOSE LOGIC\n    if (resume <= width && Math.abs(currentPosition) < bound.gap && rect.width < bound.gap &&\n    isBoundX && this.scrollControl && rect.displacementX < ZERO) {\n      const response = {\n        [DRI.position]: currentPosition,\n        [DRI.posOnStart]: this.positionOnStart,\n        [DRI.dimension]: vdimension,\n        [DRI.close]: true,\n        [DRI.open]: false\n      }\n      fn.call(this._context, new Service(touchEvent), response, rect)\n    }\n  }\n\n  /**\n   * The `touchend` event handler for the `Left` drawer `class`\n   * @param {TouchEvent} touchEvent an event `object`: An event `object`\n   * representing an `object` of all `properties` related\n   * to the `touchend` event.\n   * @param {Function} fn - a callback function called when the `end`\n   * event is triggered\n   * @param {{}} thresholdState - a state object which should be passed\n   * by reference for updating by this method\n   * @returns {void}\n   */\n  end(touchEvent, fn, thresholdState) {\n    this.timing.end = new Date()\n\n    const end = touchEvent.changedTouches[0].clientX\n    this.endX = end\n    this.endY = touchEvent.changedTouches[0].clientY\n\n    const rect = new VectorRectangle(this.startX, this.startY, this.endX, this.endY)\n\n    const start = this.startX\n    const TIMING = this.timing.end.getTime() - this.timing.start.getTime()\n    const threshold = this.threshold\n    const signedOffsetSide = this.element.offsetLeft\n    const bound = this.bound\n    const customBound = new Bound(bound.upper + this.positionOnStart, bound.upper)\n    const nonZero = `${bound.slack}${this.unit}`\n    const zero = `${ZERO}`\n    const width = bound.upper || this.width\n    const offsetSide = Math.abs(signedOffsetSide)\n    let action = OPEN\n    // release the control for another session\n    this.scrollControl = this.scrollControlSet = false // eslint-disable-line no-multi-assign\n\n    const response = {\n      [DRI.position]: signedOffsetSide,\n      [DRI.posOnStart]: this.positionOnStart,\n      rect\n    }\n\n    function getResponse(state, trueForOpen) {\n      if (state === THRESHOLD && trueForOpen || state === BELOW_THRESHOLD && !trueForOpen) {\n        return {\n          [DRI.dimension]: zero,\n          TIMING,\n          [DRI.oppositeDimension]: nonZero,\n          ...response\n        }\n      } else if (state === THRESHOLD && !trueForOpen || state === BELOW_THRESHOLD && trueForOpen) {\n        return {\n          [DRI.dimension]: nonZero,\n          TIMING,\n          [DRI.oppositeDimension]: zero,\n          ...response\n        }\n      }\n      return {}\n    }\n\n    // OPEN LOGIC\n    if (rect.displacementX >= ZERO && (start <= this.maxArea || start <= width + signedOffsetSide)) {\n      if (rect.width >= customBound.gap * resolveThreshold(threshold)) {\n        thresholdState.state = [THRESHOLD, CLOSE]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], true)\n      } else {\n        thresholdState.state = [BELOW_THRESHOLD, CLOSE]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], true)\n      }\n      thresholdState.service = new Service(touchEvent)\n      fn.call(this, action)\n      return\n    }\n\n    // CLOSE LOGIC\n    if (rect.displacementX <= ZERO && this.resumeX <= width) {\n      action = CLOSE\n      if (offsetSide >= width * threshold) {\n        thresholdState.state = [THRESHOLD, OPEN]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], false)\n      } else {\n        thresholdState.state = [BELOW_THRESHOLD, OPEN]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], false)\n      }\n      thresholdState.service = new Service(touchEvent)\n      fn.call(this, action)\n    }\n  }\n\n  setContext(ctx) {\n    this._context = ctx\n    return this\n  }\n\n  static _getStyle(elt, pseudoElt) {\n    return pseudoElt ? WINDOW.getComputedStyle(elt, pseudoElt) : WINDOW.getComputedStyle(elt)\n  }\n\n  static _windowSize() {\n    return WINDOW.screen.width\n  }\n\n  // window size is not needed here; at least not yet\n  // the major purpose of this is to update bound dependents\n  _updateOrientation() {\n    this.winSize = typeof this._winSize === 'function' ? this._winSize() : Left._windowSize()\n    this.minArea = this.bound.lower || this.options.maxStartArea || MAX_START_AREA\n  }\n}\n","import {\n  Bound,\n  DrawerResponseInterface as DRI,\n  Path,\n  WINDOW,\n  ZERO,\n  offsetRight,\n  resolveThreshold\n} from './../../util'\nimport {\n  Service\n} from './../service'\nimport {\n  VectorRectangle\n} from './../vector'\n\nconst THRESHOLD = 'threshold'\nconst BELOW_THRESHOLD = 'belowthreshold'\nconst OPEN = 'open'\nconst CLOSE = 'close'\nconst UNIT = 'px'\nconst MAX_START_AREA = 25\nconst THRESHOLD_VALUE = 0.667\nconst FALSE_TOUCH_START_POINT = 2\n\nexport default class Right {\n  /**\n   * @param {{}} options\n   * an object containing all required properties\n   * @param {Bound} bound a boundary object\n   */\n  constructor(options, bound) {\n    this.options = options\n    this.bound = bound\n    /**\n     * Drawer Element\n     * @type {HTMLElement}\n     */\n    this.element = options.ELEMENT\n    /**\n     * Size of device window\n     * @type {Function}\n     */\n    this._winSize = this.options.sizeOfWindow || Right._windowSize\n    /**\n     * @type {number}\n     */\n    this.winSize = this._winSize()\n    /**\n     * @type {number}\n     */\n    this.width = this.options.SIZE\n    this.unit = this.options.unit || UNIT\n    /**\n     * @type {number}\n     * A minimum area where the draw-start is sensitive\n     */\n    this.minArea = this.winSize - (this.bound.lower || this.options.maxStartArea || MAX_START_AREA)\n\n    /**\n     * A threshold which the `touchmove` signal must attain\n     * before being qualified to stay shown\n     * the threshold should be a value between `0` and `1.0`\n     * @type {number}\n     */\n    this.threshold = this.options.threshold || THRESHOLD_VALUE\n    this.threshold = resolveThreshold(this.threshold)\n\n    // Touch coordinates (Touch Start)\n    this.startX = -1\n    this.startY = -1\n    // Touch coordinates (Touch Move)\n    this.resumeX = -1\n    this.resumeY = -1\n    // Touch coordinates (Touch End) [these may not be important]\n    this.endX = -1\n    this.endY = -1\n\n    /**\n     * A control for scroll. This control prevents\n     * a clash between coordinates dancing between\n     * the (&delta;`X`) coords and (&delta;`Y`) coords.\n     * Utilising the `Rectangle` class to get bounds\n     * and isolate territories\n     * @type {boolean}\n     */\n    this.scrollControlSet = false\n    this.scrollControl = null\n    this.timing = {\n      /**\n       * @type {Date}\n       */\n      start: null,\n      /**\n       * @type {Date}\n       */\n      end: null\n    }\n\n    this._context = this\n  }\n\n  /**\n   * The `touchstart` event handler for the `Left` drawer `class`\n   * @param {TouchEvent} touchEvent an event `object`: An event `object`\n   * representing an `object` of all `properties` related\n   * to the `touchstart` event.\n   * @param {Function} fn - a callback function called when the `start`\n   * event is triggered\n   * @returns {void}\n   */\n  start(touchEvent, fn) {\n    this.timing.start = new Date()\n    this._updateOrientation()\n    const WIN_WIDTH = this.winSize\n    const start = touchEvent.changedTouches[0].clientX\n    this.startX = start\n    this.startY = touchEvent.changedTouches[0].clientY\n    /**\n     * The `Drawer`'s `Right` class uses the `CSS property`, `right`\n     * for updating and defining position of the drawn element\n     */\n    const currentPosition = offsetRight(this.element)\n    const bound = this.bound\n    this.positionOnStart = currentPosition\n    const dimension = bound.lower ? `-${bound.upper - bound.lower}${this.unit}` : `-${bound.upper - (WIN_WIDTH - start)}${this.unit}`\n    const displacement = `-${bound.upper - FALSE_TOUCH_START_POINT}${this.unit}`\n\n    if (start <= WIN_WIDTH && start >= this.minArea && currentPosition === bound.slack) {\n      const response = {\n        [DRI.position]: currentPosition,\n        [DRI.dimension]: dimension,\n        [DRI.displacement]: displacement\n      }\n      fn.call(this._context, new Service(touchEvent), response, new Path(this.startX, this.startY))\n    }\n  }\n\n  /**\n   * The `touchmove` event handler for the `Right` drawer `class`\n   * @param {TouchEvent} touchEvent an event `object`: An event `object`\n   * representing an `object` of all `properties` related\n   * to the `touchmove` event.\n   * @param {Function} fn - a callback function called when the `move`\n   * event is triggered\n   * @returns {void}\n   */\n  move(touchEvent, fn) {\n    /* eslint complexity: [\"error\", 25] */\n    const WIN_WIDTH = this.winSize\n    const FALSE_WIDTH = WIN_WIDTH - this.bound.upper\n    const resume = touchEvent.changedTouches[0].clientX\n    this.resumeX = resume\n    this.resumeY = touchEvent.changedTouches[0].clientY\n\n    const currentPosition = offsetRight(this.element)\n    const bound = this.bound\n    // const nextAction = this.positionOnStart === ZERO ? CLOSE : OPEN\n\n    const start = this.startX\n    // const width = bound.upper || this.width\n    /**\n     * When the touch doesn't start from the max-width\n     * of the element ignore `start` and use `width`\n     * as starting point.\n     */\n    const virtualStart = start < FALSE_WIDTH ? FALSE_WIDTH : start\n\n    const dimension = `${start - resume + this.positionOnStart}${this.unit}`\n    // const dimension = `-${width - bound.lower - (WIN_WIDTH - resume)}${this.unit}`\n\n    /**\n     * Dimension for closing. When the drawer is being closed,\n     * the `width` is the max dimension and the `start` could\n     * possibly be more than the `width`\n     * or less than the `width`.\n     * To assure an accurate dimension the `virtualStart`\n     * determines whether to use the `width` as starting point\n     * or the actual `start`. If the actual start is more than\n     * `width`, the width becomes the start point else the `start`\n     */\n    const vdimension = `-${-virtualStart + resume - this.positionOnStart}${this.unit}`\n    const rect = new VectorRectangle(\n      this.startX,\n      this.startY,\n      this.resumeX,\n      this.resumeY\n    )\n    const isBoundX = rect.greaterWidth\n\n    if (!this.scrollControlSet) {\n      this.scrollControl = isBoundX\n      this.scrollControlSet = !this.scrollControlSet\n    }\n\n    // OPEN LOGIC\n    if (start <= WIN_WIDTH && (start >= this.minArea || start >= FALSE_WIDTH - currentPosition) &&\n    currentPosition < ZERO && rect.width < bound.gap && isBoundX &&\n    this.scrollControl && rect.displacementX < ZERO) {\n      const response = {\n        [DRI.position]: currentPosition,\n        [DRI.posOnStart]: this.positionOnStart,\n        [DRI.dimension]: dimension,\n        [DRI.open]: true,\n        [DRI.close]: false\n      }\n      fn.call(this._context, new Service(touchEvent), response, rect)\n    }\n\n    // CLOSE LOGIC\n    if (resume >= FALSE_WIDTH && Math.abs(currentPosition) < bound.gap && rect.width < bound.gap &&\n    isBoundX && this.scrollControl && rect.displacementX > ZERO) {\n      const response = {\n        [DRI.position]: currentPosition,\n        [DRI.posOnStart]: this.positionOnStart,\n        [DRI.dimension]: vdimension,\n        [DRI.close]: true,\n        [DRI.open]: false\n      }\n      fn.call(this._context, new Service(touchEvent), response, rect)\n    }\n  }\n\n  /**\n   * The `touchend` event handler for the `Right` drawer `class`\n   * @param {TouchEvent} touchEvent an event `object`: An event `object`\n   * representing an `object` of all `properties` related\n   * to the `touchend` event.\n   * @param {Function} fn - a callback function called when the `end`\n   * event is triggered\n   * @param {{}} thresholdState - a state object which should be passed\n   * by reference for updating by this method\n   * @returns {void}\n   */\n  end(touchEvent, fn, thresholdState) {\n    this.timing.end = new Date()\n    const WIN_WIDTH = this.winSize\n    const FALSE_WIDTH = WIN_WIDTH - this.bound.upper\n    const end = touchEvent.changedTouches[0].clientX\n    this.endX = end\n    this.endY = touchEvent.changedTouches[0].clientY\n\n    const rect = new VectorRectangle(this.startX, this.startY, this.endX, this.endY)\n\n    const start = this.startX\n    const TIMING = this.timing.end.getTime() - this.timing.start.getTime()\n    const threshold = this.threshold\n    const signedOffsetSide = offsetRight(this.element)\n    const bound = this.bound\n    const customBound = new Bound(bound.upper + this.positionOnStart, bound.upper)\n    const nonZero = `${bound.slack}${this.unit}`\n    const zero = `${ZERO}`\n    const width = bound.upper || this.width\n    const offsetSide = Math.abs(signedOffsetSide)\n    let action = OPEN\n    // release the control for another session\n    this.scrollControl = this.scrollControlSet = false // eslint-disable-line no-multi-assign\n\n    const response = {\n      [DRI.position]: signedOffsetSide,\n      [DRI.posOnStart]: this.positionOnStart,\n      rect\n    }\n\n    function getResponse(state, trueForOpen) {\n      if (state === THRESHOLD && trueForOpen || state === BELOW_THRESHOLD && !trueForOpen) {\n        return {\n          [DRI.dimension]: zero,\n          TIMING,\n          [DRI.oppositeDimension]: nonZero,\n          ...response\n        }\n      } else if (state === THRESHOLD && !trueForOpen || state === BELOW_THRESHOLD && trueForOpen) {\n        return {\n          [DRI.dimension]: nonZero,\n          TIMING,\n          [DRI.oppositeDimension]: zero,\n          ...response\n        }\n      }\n      return {}\n    }\n\n    // OPEN LOGIC\n    if (rect.displacementX <= ZERO && (start >= this.minArea || start >= FALSE_WIDTH - signedOffsetSide)) {\n      if (rect.width >= customBound.gap * resolveThreshold(threshold)) {\n        thresholdState.state = [THRESHOLD, CLOSE]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], true)\n      } else {\n        thresholdState.state = [BELOW_THRESHOLD, CLOSE]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], true)\n      }\n      thresholdState.service = new Service(touchEvent)\n      fn.call(this, action)\n      return\n    }\n\n    // CLOSE LOGIC\n    if (rect.displacementX >= ZERO && this.resumeX >= FALSE_WIDTH) {\n      action = CLOSE\n      if (offsetSide >= width * threshold) {\n        thresholdState.state = [THRESHOLD, OPEN]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], false)\n      } else {\n        thresholdState.state = [BELOW_THRESHOLD, OPEN]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], false)\n      }\n      thresholdState.service = new Service(touchEvent)\n      fn.call(this, action)\n    }\n  }\n\n  setContext(ctx) {\n    this._context = ctx\n    return this\n  }\n\n  static _getStyle(elt, pseudoElt) {\n    return pseudoElt ? WINDOW.getComputedStyle(elt, pseudoElt) : WINDOW.getComputedStyle(elt)\n  }\n\n  static _windowSize() {\n    return WINDOW.screen.width\n  }\n\n  // no need for `window.onorientationchange`\n  _updateOrientation() {\n    this.winSize = typeof this._winSize === 'function' ? this._winSize() : Right._windowSize()\n    this.minArea = this.winSize - (this.bound.lower || this.options.maxStartArea || MAX_START_AREA)\n  }\n}\n","import {\n  Bound,\n  DrawerResponseInterface as DRI,\n  Path,\n  WINDOW,\n  ZERO,\n  resolveThreshold\n} from './../../util'\nimport {\n  Service\n} from '../service'\nimport {\n  VectorRectangle\n} from './../vector'\n\nconst THRESHOLD = 'threshold'\nconst BELOW_THRESHOLD = 'belowthreshold'\nconst OPEN = 'open'\nconst CLOSE = 'close'\nconst UNIT = 'px'\nconst MAX_START_AREA = 25\nconst THRESHOLD_VALUE = 0.667\nconst FALSE_TOUCH_START_POINT = 2\n\nexport default class Top {\n  /**\n   * @param {{}} options\n   * an object containing all required properties\n   * @param {Bound} bound a boundary object\n   */\n  constructor(options, bound) {\n    this.options = options\n    this.bound = bound\n    /**\n     * Drawer Element\n     * @type {HTMLElement}\n     */\n    this.element = options.ELEMENT\n    /**\n     * Size of device window\n     *\n     * unused: required in `Right` and `Bottom`\n     * @type {Function}\n     */\n    this._winSize = this.options.sizeOfWindow || Top._windowSize\n    this.winSize = this._winSize()\n    /**\n     * @type {number}\n     */\n    this.height = this.options.SIZE\n    this.unit = this.options.unit || UNIT\n    /**\n     * @type {number}\n     * A maximum area where the draw-start is sensitive\n     * Use set boundary (`bound`) if there's an initial\n     * offset\n     */\n    this.maxArea = this.bound.lower || this.options.maxStartArea || MAX_START_AREA\n\n    /**\n     * A threshold which the `touchmove` signal must attain\n     * before being qualified to stay shown\n     * the threshold should be a value between `0` and `1.0`\n     * @type {number}\n     */\n    this.threshold = this.options.threshold || THRESHOLD_VALUE\n    this.threshold = resolveThreshold(this.threshold)\n\n    // Touch coordinates (Touch Start)\n    this.startX = -1\n    this.startY = -1\n    // Touch coordinates (Touch Move)\n    this.resumeX = -1\n    this.resumeY = -1\n    // Touch coordinates (Touch End) [these may not be important]\n    this.endX = -1\n    this.endY = -1\n\n    /**\n     * A control for scroll. This control prevents\n     * a clash between coordinates dancing between\n     * the (&delta;`X`) coords and (&delta;`Y`) coords.\n     * Utilising the `Rectangle` class to get bounds\n     * and isolate territories\n     * @type {boolean}\n     */\n    this.scrollControlSet = false\n    this.scrollControl = null\n    this.timing = {\n      /**\n       * @type {Date}\n       */\n      start: null,\n      /**\n       * @type {Date}\n       */\n      end: null\n    }\n\n    this._context = this\n  }\n\n  /**\n   * The `touchstart` event handler for the `Top` drawer `class`\n   * @param {TouchEvent} touchEvent an event `object`: An event `object`\n   * representing an `object` of all `properties` related\n   * to the `touchstart` event.\n   * @param {Function} fn - a callback function called when the `start`\n   * event is triggered\n   * @returns {void}\n   */\n  start(touchEvent, fn) {\n    this.timing.start = new Date()\n    this._updateOrientation()\n    const start = touchEvent.changedTouches[0].clientY\n    this.startX = touchEvent.changedTouches[0].clientX\n    this.startY = start\n    /**\n     * The `Drawer`'s `Top` class uses the `CSS property`, `top`\n     * for updating and defining position of the drawn element\n     */\n    const currentPosition = this.element.offsetTop\n    const bound = this.bound\n    this.positionOnStart = currentPosition\n    const dimension = bound.lower ? `-${bound.upper - bound.lower}${this.unit}` : `-${bound.upper - start}${this.unit}`\n    const displacement = `-${bound.upper - FALSE_TOUCH_START_POINT}${this.unit}`\n    const maxArea = bound.lower || this.minArea\n\n    if (start >= ZERO && start <= maxArea && currentPosition === bound.slack) {\n      const response = {\n        [DRI.position]: currentPosition,\n        [DRI.dimension]: dimension,\n        [DRI.displacement]: displacement\n      }\n      fn.call(this._context, new Service(touchEvent), response, new Path(this.startX, this.startY))\n    }\n  }\n\n  /**\n   * The `touchmove` event handler for the `Top` drawer `class`\n   * @param {TouchEvent} touchEvent an event `object`: An event `object`\n   * representing an `object` of all `properties` related\n   * to the `touchmove` event.\n   * @param {Function} fn - a callback function called when the `move`\n   * event is triggered\n   * @returns {void}\n   */\n  move(touchEvent, fn) {\n    /* eslint complexity: [\"error\", 25] */\n    const resume = touchEvent.changedTouches[0].clientY\n    this.resumeX = touchEvent.changedTouches[0].clientX\n    this.resumeY = resume\n\n    const currentPosition = this.element.offsetTop\n    const bound = this.bound\n    // const nextAction = this.positionOnStart === ZERO ? CLOSE : OPEN\n\n    const start = this.startX\n    const height = bound.upper || this.height\n    /**\n     * When the touch doesn't start from the max-height\n     * of the element ignore `start` and use `height`\n     * as starting point.\n     */\n    const virtualStart = start > height ? height : start\n    /**\n     * Dimension for opening. When the drawer is being opened,\n     * the `height` is the max dimension, and the `start` can\n     * only be less than the `height` (from a range of `0` to\n     * `this.maxArea` e.g `0` - `25`), so the current\n     * reading from `resume` is subtracted from the `height` to\n     * get the accurate position to update the drawer with.\n     */\n\n    const dimension = `${-start + resume + this.positionOnStart}${this.unit}`\n    // const dimension = `-${height - bound.lower - resume}${this.unit}`\n    /**\n     * Dimension for closing. When the drawer is being closed,\n     * the `height` is the max dimension and the `start` could\n     * possibly be more than the `height`\n     * or less than the `height`.\n     * To assure an accurate dimension the `virtualStart`\n     * determines whether to use the `height` as starting point\n     * or the actual `start`. If the actual start is more than\n     * `height`, the height becomes the start point else the `start`\n     */\n    const vdimension = `-${virtualStart - resume - this.positionOnStart}${this.unit}`\n    const rect = new VectorRectangle(\n      this.startX,\n      this.startY,\n      this.resumeX,\n      this.resumeY\n    )\n    const isBoundY = rect.greaterHeight\n\n    if (!this.scrollControlSet) {\n      this.scrollControl = isBoundY\n      this.scrollControlSet = !this.scrollControlSet\n    }\n\n    // OPEN LOGIC\n    if (start >= ZERO && (start <= this.maxArea || start <= height + currentPosition) &&\n    currentPosition < ZERO && rect.width < bound.gap && isBoundY &&\n    this.scrollControl && rect.displacementY > ZERO) {\n      const response = {\n        [DRI.position]: currentPosition,\n        [DRI.posOnStart]: this.positionOnStart,\n        [DRI.dimension]: dimension,\n        [DRI.open]: true,\n        [DRI.close]: false\n      }\n      fn.call(this._context, new Service(touchEvent), response, rect)\n    }\n\n    // CLOSE LOGIC\n    if (resume <= this.height && Math.abs(currentPosition) < bound.gap && rect.width < bound.gap &&\n    isBoundY && this.scrollControl && rect.displacementY < ZERO) {\n      const response = {\n        [DRI.position]: currentPosition,\n        [DRI.posOnStart]: this.positionOnStart,\n        [DRI.dimension]: vdimension,\n        [DRI.close]: true,\n        [DRI.open]: false\n      }\n      fn.call(this._context, new Service(touchEvent), response, rect)\n    }\n  }\n\n  /**\n   * The `touchend` event handler for the `Top` drawer `class`\n   * @param {TouchEvent} touchEvent an event `object`: An event `object`\n   * representing an `object` of all `properties` related\n   * to the `touchend` event.\n   * @param {Function} fn - a callback function called when the `end`\n   * event is triggered\n   * @param {{}} thresholdState - a state object which should be passed\n   * by reference for updating by this method\n   * @returns {void}\n   */\n  end(touchEvent, fn, thresholdState) {\n    this.timing.end = new Date()\n\n    const end = touchEvent.changedTouches[0].clientY\n    this.endX = touchEvent.changedTouches[0].clientX\n    this.endY = end\n\n    const rect = new VectorRectangle(this.startX, this.startY, this.endX, this.endY)\n\n    const start = this.startY\n    const TIMING = this.timing.end.getTime() - this.timing.start.getTime()\n    const threshold = this.threshold\n    const signedOffsetSide = this.element.offsetTop\n    const bound = this.bound\n    const customBound = new Bound(bound.upper + this.positionOnStart, bound.upper)\n    const nonZero = `${bound.slack}${this.unit}`\n    const zero = `${ZERO}`\n    const height = bound.upper || this.height\n    const offsetSide = Math.abs(signedOffsetSide)\n    let action = OPEN\n    // release the control for another session\n    this.scrollControl = this.scrollControlSet = false // eslint-disable-line no-multi-assign\n\n    const response = {\n      [DRI.position]: signedOffsetSide,\n      [DRI.posOnStart]: this.positionOnStart,\n      rect\n    }\n\n    function getResponse(state, trueForOpen) {\n      if (state === THRESHOLD && trueForOpen || state === BELOW_THRESHOLD && !trueForOpen) {\n        return {\n          [DRI.dimension]: zero,\n          TIMING,\n          [DRI.oppositeDimension]: nonZero,\n          ...response\n        }\n      } else if (state === THRESHOLD && !trueForOpen || state === BELOW_THRESHOLD && trueForOpen) {\n        return {\n          [DRI.dimension]: nonZero,\n          TIMING,\n          [DRI.oppositeDimension]: zero,\n          ...response\n        }\n      }\n      return {}\n    }\n\n    // OPEN LOGIC\n    if (rect.displacementY >= ZERO && (start <= this.maxArea || start <= height + signedOffsetSide)) {\n      if (rect.height >= customBound.gap * resolveThreshold(threshold)) {\n        thresholdState.state = [THRESHOLD, CLOSE]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], true)\n      } else {\n        thresholdState.state = [BELOW_THRESHOLD, CLOSE]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], true)\n      }\n      thresholdState.service = new Service(touchEvent)\n      fn.call(this, action)\n      return\n    }\n\n    // CLOSE LOGIC\n    if (rect.displacementY <= ZERO && this.resumeY <= height) {\n      action = CLOSE\n      if (offsetSide >= height * threshold) {\n        thresholdState.state = [THRESHOLD, OPEN]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], false)\n      } else {\n        thresholdState.state = [BELOW_THRESHOLD, OPEN]\n        thresholdState.stateObj = getResponse(thresholdState.state[0], false)\n      }\n      thresholdState.service = new Service(touchEvent)\n      fn.call(this, action)\n    }\n  }\n\n  setContext(ctx) {\n    this._context = ctx\n    return this\n  }\n\n  static _getStyle(elt, pseudoElt) {\n    return pseudoElt ? WINDOW.getComputedStyle(elt, pseudoElt) : WINDOW.getComputedStyle(elt)\n  }\n\n  static _windowSize() {\n    return WINDOW.screen.height\n  }\n\n  // window size is not need here; at least not yet\n  // the major purpose of this is to update bound dependents\n  _updateOrientation() {\n    this.winSize = typeof this._winSize === 'function' ? this._winSize() : Top._windowSize()\n    this.minArea = this.bound.lower || this.options.maxStartArea || MAX_START_AREA\n  }\n}\n","import Bottom from './bottom'\nimport Left from './left'\nimport Right from './right'\nimport Top from './top'\nimport {\n  WINDOW\n} from '../../util'\n\nconst BELOW_THRESHOLD = 'belowthreshold'\nconst THRESHOLD = 'threshold'\nconst START = 'start'\nconst MOVE = 'move'\nconst END = 'end'\nconst CLASS_TYPE = '[object SnappedDrawer]'\n\nexport default class SnappedDrawer {\n  /**\n   * @param {{}} options an object of configuration options\n   * @param {Bound} bound a boundary object\n   * @param {{}} drawerManager an object that helps manage drawers\n   * especially when more than one drawer service is running\n   */\n  constructor(options, bound, drawerManager) {\n    this._options = options\n    this._drawerManager = drawerManager\n    this._element = options.ELEMENT\n    this._target = options.TARGET\n    this._handlers = null\n    this._direction = options.DIRECTION\n    this._calibration = null\n    this._callbacks = null\n    this._context = this\n    this._id = 0\n    this.events = ['touchstart', 'touchmove', 'touchend']\n\n    this._setCalibration(this._direction, bound)\n  }\n\n  // enum\n  static UP = 0\n  static LEFT = 1\n  static DOWN = 2\n  static RIGHT = 3\n\n  // public\n  /**\n   * Make sure event handlers are registered using `Drawer.on(...)` before\n   * calling `Drawer.activate()`\n   *\n   * @see {@link Drawer#on | Drawer.on}\n   * @returns {void}\n   */\n  activate() {\n    // get registered callbacks or set default\n    const startfn = this._callbacks ? this._callbacks[START] : def\n    const movefn = this._callbacks ? this._callbacks[MOVE] : def\n    const endfn = this._callbacks ? this._callbacks[END] : def\n\n    const startHandler = (touchEvent) => {\n      const activity = this._drawerManager.getRunningActivity()\n      if (this._calibration &&\n        (this._id && activity && activity.id === this._id ||\n          !activity && this._isCoolSignal(this._getSignal(touchEvent)))) {\n        this._calibration.start(touchEvent, startfn)\n      }\n    }\n\n    const moveHandler = (touchEvent) => {\n      const activity = this._drawerManager.getRunningActivity()\n      if (this._calibration && activity && activity.id === this._id) {\n        this._calibration.move(touchEvent, movefn)\n      }\n    }\n\n    const endHandler = (touchEvent) => {\n      const activity = this._drawerManager.getRunningActivity()\n      if (this._calibration && activity && activity.id === this._id) {\n        const state = {}\n        this._calibration.end(touchEvent, endfn, state) // state by Ref\n        this._processThresholdState(state)\n      }\n    }\n\n    this._register(startHandler, moveHandler, endHandler)\n    for (let i = 0; i < this.events.length; i++) {\n      this._target.addEventListener(this.events[i], this._handlers[i])\n    }\n  }\n\n  /**\n   * A method provided by the `Drawer interface` to deactivate the drawer\n   * @returns {void}\n   */\n  deactivate() {\n    for (let i = 0; i < this.events.length; i++) {\n      this._target.removeEventListener(this.events[i], this._handlers[i])\n    }\n    this._register(null)\n  }\n\n  /**\n   * A method used to register callbacks for the `Drawer class` `touchstart`,\n   * `touchmove` and `touchend` event handlers.\n   *\n   * Always call `Drawer.on(...)` before `Drawer.activate()`.\n   * As in:\n   * ```js\n   * const drawer = new Drawer()\n   * drawer.on(event, () => {\n   *  // TODO\n   * }).activate()\n   * ```\n   *\n   * To prevent modifying the context of `this`, the\n   * `drawer.setContext(...)` method should be invoked with an\n   * argument which is the `this` context of the\n   * `calling class` or alternatively using a wrapper function,\n   * then call the main handler method.\n   * ```js\n   * class UseDrawer {\n   *  // CODE\n   *  method() {\n   *    const drawer = new Drawer()\n   *    drawer.on(...)\n   *      .setContext(this)\n   *      .activate()\n   *  }\n   * }\n   * // OR\n   * drawer.on(event, (stateObj) => {\n   *  this.handler.call(this, stateObj)\n   * }).activate()\n   * ```\n   *\n   * Valid event types taken by this method are:\n   * - `start`\n   * - `move`\n   * - `end`\n   * - `threshold`\n   * - `belowthreshold`\n   * @param {string} event The event type as in the above list\n   * @param {Function} fn A function to call when this event triggers\n   * @returns {this} Returns an instance variable of the `Drawer` class\n   */\n  on(event, fn) {\n    this._registerCallbacks(event, fn)\n    return this\n  }\n\n  setContext(ctx) {\n    this._context = ctx\n    this._calibration.setContext(ctx)\n    return this\n  }\n\n  setServiceID(id) {\n    if (typeof id !== 'number') {\n      throw new TypeError('expected `id` to be a unique number')\n    }\n    this._id = id\n  }\n\n  toString() {\n    return CLASS_TYPE\n  }\n\n  _processThresholdState(state) {\n    if (Object.keys(state).length < 1) {\n      return\n    }\n    const {\n      state: stateArray,\n      stateObj,\n      service\n    } = state\n    const {\n      rect\n    } = stateObj\n    this._callbacks[stateArray[0]].call(this._context, service, stateArray, stateObj, rect)\n  }\n\n  _setCalibration(point, bound) {\n    switch (point) {\n      case SnappedDrawer.UP:\n        this._calibration = new Top(this._options, bound)\n        break\n      case SnappedDrawer.LEFT:\n        this._calibration = new Left(this._options, bound)\n        break\n      case SnappedDrawer.DOWN:\n        this._calibration = new Bottom(this._options, bound)\n        break\n      case SnappedDrawer.RIGHT:\n        this._calibration = new Right(this._options, bound)\n        break\n      default:\n        throw RangeError('Direction out of range')\n    }\n  }\n\n  _isCoolSignal(signal) {\n    const size = this._direction === SnappedDrawer.UP || this._direction === SnappedDrawer.DOWN ? WINDOW.screen.height : WINDOW.screen.width\n    switch (this._direction) {\n      case SnappedDrawer.UP:\n      case SnappedDrawer.LEFT:\n        return signal <= size / 2\n      case SnappedDrawer.RIGHT:\n      case SnappedDrawer.DOWN:\n        return signal > size / 2\n      default:\n        return false\n    }\n  }\n\n  _getSignal(emitter) {\n    switch (this._direction) {\n      case SnappedDrawer.UP:\n      case SnappedDrawer.DOWN:\n        return emitter.changedTouches[0].clientY\n      case SnappedDrawer.LEFT:\n      case SnappedDrawer.RIGHT:\n        return emitter.changedTouches[0].clientX\n      default:\n        return null\n    }\n  }\n\n  _registerCallbacks(event, fn) {\n    this._callbacks = this._callbacks || {\n      [START]: def,\n      [MOVE]: def,\n      [END]: def,\n      [THRESHOLD]: def,\n      [BELOW_THRESHOLD]: def\n    }\n    if (event in this._callbacks) {\n      this._callbacks[event] = fn\n    }\n  }\n\n  _register(...handlers) {\n    this._handlers = handlers\n  }\n}\n\nfunction def() {\n  return false\n}\n","import SnappedDrawer from './snapped-drawer'\n\nclass DrawerManagementStore {\n  constructor() {\n    this.activities = []\n  }\n\n  pushActivity(activity) {\n    this.activities.push(activity)\n  }\n\n  getRunningActivity() {\n    return this.activities.find((activity) => activity.isRunning())\n  }\n}\n\nexport default class Drawer {\n  static SnappedDrawer = SnappedDrawer\n  // enum\n  static UP = SnappedDrawer.UP\n  static LEFT = SnappedDrawer.LEFT\n  static DOWN = SnappedDrawer.DOWN\n  static RIGHT = SnappedDrawer.RIGHT\n  static DrawerManagementStore = new DrawerManagementStore()\n}\n"],"names":["Service","event","_event","lock","stopImmediatePropagation","inhibitSubTask","preventDefault","Rectangle","paths","length","x1","y1","x2","y2","coordsX","coordsY","Math","abs","width","height","greaterWidth","VectorRectangle","displacementY","displacementX","sqrt","THRESHOLD","BELOW_THRESHOLD","OPEN","CLOSE","UNIT","MAX_START_AREA","THRESHOLD_VALUE","FALSE_TOUCH_START_POINT","Bottom","options","bound","element","ELEMENT","_winSize","sizeOfWindow","_windowSize","winSize","SIZE","unit","minArea","lower","maxStartArea","threshold","resolveThreshold","startX","startY","resumeX","resumeY","endX","endY","scrollControlSet","scrollControl","timing","start","end","_context","touchEvent","fn","Date","_updateOrientation","WIN_HEIGHT","changedTouches","clientY","clientX","currentPosition","offsetBottom","positionOnStart","dimension","upper","displacement","slack","response","DRI","position","call","Path","move","FALSE_HEIGHT","resume","virtualStart","vdimension","rect","isBoundY","greaterHeight","ZERO","gap","posOnStart","open","close","thresholdState","TIMING","getTime","signedOffsetSide","customBound","Bound","nonZero","zero","offsetSide","action","getResponse","state","trueForOpen","oppositeDimension","stateObj","service","setContext","ctx","_getStyle","elt","pseudoElt","WINDOW","getComputedStyle","screen","Left","maxArea","offsetLeft","isBoundX","Right","WIN_WIDTH","offsetRight","FALSE_WIDTH","Top","offsetTop","START","MOVE","END","CLASS_TYPE","SnappedDrawer","drawerManager","_options","_drawerManager","_element","_target","TARGET","_handlers","_direction","DIRECTION","_calibration","_callbacks","_id","events","_setCalibration","activate","startfn","def","movefn","endfn","startHandler","activity","getRunningActivity","id","_isCoolSignal","_getSignal","moveHandler","endHandler","_processThresholdState","_register","i","addEventListener","deactivate","removeEventListener","on","_registerCallbacks","setServiceID","TypeError","toString","Object","keys","stateArray","point","UP","LEFT","DOWN","RIGHT","RangeError","signal","size","emitter","handlers","DrawerManagementStore","activities","pushActivity","push","find","isRunning","Drawer"],"mappings":"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"}