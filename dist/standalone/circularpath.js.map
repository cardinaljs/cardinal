{"version":3,"file":"circularpath.js","sources":["../../src/circular-path/circle.js","../../src/circular-path/index.js"],"sourcesContent":["export const POINT_ANGLE = 360\nexport const PI = Math.PI\nexport const RAD = PI / (POINT_ANGLE >> 1)\n\nexport class Circle {\n  constructor(radius) {\n    this.radius = radius\n    this.diameter = this.radius * 2\n  }\n\n  get area() {\n    return PI * this.radius ** 2\n  }\n\n  get circumference() {\n    return 2 * PI * this.radius\n  }\n\n  areaOfSect(angle) {\n    angle *= RAD\n    return angle / POINT_ANGLE * this.area\n  }\n\n  arc(angle) {\n    angle *= RAD\n    return angle / POINT_ANGLE * this.circumference\n  }\n}\n","import {\n  Circle,\n  RAD\n} from './circle'\nimport {\n  Path\n} from '../util'\n\nconst DEG = 1 / RAD\n/**\n * Enum of all quadrants from first to fourth.\n * The quadrant is not a usual one; it starts from the 12th\n * hand of the clock and moves anti-clockwise\n * @enum {number}\n * @const\n */\nconst Quadrant = {\n  FIRST: 360,\n  SECOND: 90,\n  THIRD: 180,\n  FOURTH: 270\n}\n\nexport default class CircularPath extends Circle {\n  constructor(radius, ...angles) {\n    super(radius)\n    this._angles = angles\n    this.angles = angles.map((value) => this._degToRad(value))\n    this._quad = null\n  }\n\n  get paths() {\n    /**\n     * @type {Path[]}\n     */\n    const out = []\n    this.angles.forEach((value) => {\n      const [\n        x, y\n      ] = this._findPath(value)\n      out.push(new Path(x, y))\n    })\n    return out\n  }\n\n  // private\n  _degToRad(deg) {\n    return RAD * deg\n  }\n\n  _radToDeg(rad) {\n    return DEG * rad\n  }\n\n  _findPath(angle) {\n    // const quad = this.getQuadrant(DEG_ANGLE)\n    return [\n      parseFloat((this.radius * Math.cos(angle)).toFixed(3)),\n      parseFloat((this.radius * Math.sin(angle)).toFixed(3))\n    ]\n  }\n\n  getQuadrant(angle) {\n    if (angle <= Quadrant.FIRST) {\n      return Quadrant.FIRST\n    } else if (angle <= Quadrant.SECOND && angle > Quadrant.FIRST) {\n      return Quadrant.SECOND\n    } else if (angle <= Quadrant.THIRD && angle > Quadrant.SECOND) {\n      return Quadrant.THIRD\n    } else if (angle <= Quadrant.FOURTH && angle > Quadrant.THIRD) {\n      return Quadrant.FOURTH\n    }\n    throw RangeError('Quadrant out of range')\n  }\n}\n"],"names":["POINT_ANGLE","PI","Math","RAD","Circle","radius","diameter","areaOfSect","angle","area","arc","circumference","DEG","Quadrant","FIRST","SECOND","THIRD","FOURTH","CircularPath","angles","_angles","map","value","_degToRad","_quad","deg","_radToDeg","rad","_findPath","parseFloat","cos","toFixed","sin","getQuadrant","RangeError","out","forEach","x","y","push","Path"],"mappings":"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"}